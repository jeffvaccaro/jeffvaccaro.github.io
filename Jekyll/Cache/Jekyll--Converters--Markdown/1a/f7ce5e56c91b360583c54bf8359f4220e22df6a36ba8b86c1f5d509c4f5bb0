I"§<p>My stomach dropped when I found out that I was being laid off! There was so much uncertainty, fear, and anger in that moment. I had so many things that I was thinking about and dreading about my situation. It probably took me about a week to calm down and start looking at my next steps and what I needed to do for my upcoming job hunt. The first thing I did was look at my resume. Thankfully, it was recently updated, but I knew I needed to put an end date where there wasn‚Äôt one. Then there was the LinkedIn profile tinkering. And once you are all ready to go, you flip the ‚ÄúOpen to Work‚Äù flag, and the recruiters find you, and everyone loves you, and it‚Äôs easy to find a new gig‚Ä¶ Well‚Ä¶ Maybe in years past that was the case, but not this time around‚Ä¶. My reality was that for the first couple of weeks, it was pretty quiet.
<br /><br />
I‚Äôm a full-stack dev, which means I float between front-end development, middle tier (API), and backend (SQL). My stack of choice is Angular with TypeScript, C#, and SQL Server. Being a full stack means you have to know quite a bit between all the different layers of an application. I don‚Äôt want to say that we are know-it-alls, but we have to know a lot. However, so much of our knowledge really is dependent on the projects that we‚Äôve worked on. No two projects are the same, especially when you talk about legacy apps (anything built before you). So the ‚ÄúJack of all trades‚Äù moniker is fairly accurate, but what I don‚Äôt like is the ‚ÄúMaster of None‚Äù part.
<br /><br />
However, this isn‚Äôt a Full Stack Dev vs‚Ä¶ post. This is about the Tech Interview. It is the Full Stack Dev‚Äôs worst nightmare. I have often said the tech interview is like going to a school you know nothing about and taking a test where you don‚Äôt know the topics or the questions ahead of time. It could be broad topics, or it could be very specific topics. It could be definition-based or LeetCode tests. For me, and I think many others, it is very difficult, nerve-wracking, and a bit insulting.
<br /><br /></p>

<h1 id="the-tech-interview-process-is-broken">The Tech interview process is BROKEN!</h1>

<p>I realize that there are a lot of impostors out there, and you feel like you need to weed those people out. Here‚Äôs the thing‚Ä¶ 9 times out of 10, the business application development project is pretty much the same. You have your data entry screen, your service which calls your API, which then either calls an Entity framework call or a stored procedure. Why would you ask questions about O(n) or have a developer do a LeetCode exercise manipulating arrays when your application is a standard business application?
<br /><br />
I was in an interview where the dev collated a list of questions that were very specific to their application. I understand that they thought those questions were valid, but I knew 5 minutes into the interview that I was not doing well, and this was not the project that I wanted to be part of. Naturally, you may say, ‚Äúsee, it worked! You figured out that it wasn‚Äôt the right fit.‚Äù Yeah, you are right, it did work. But I would counter with, the interviewer choosing this ‚Äútesting style‚Äù of interview is wasting their time, as even if they find someone to ‚Äúpass‚Äù their test, they are still leaving out the personality part. Remember, we have to work together for 8+ hours a day. How many articles do we have to read about EQ over IQ and the importance of team chemistry?
<br /><br /></p>

<h1 id="so-what-are-the-arguments-for-the-standard-tech-interview">So what are the arguments for the Standard Tech interview?</h1>

<p><b>Standardization</b>: Technical tests help standardize the evaluation process, ensuring that all candidates are measured against the same criteria.
<b>Technical Depth</b>: Demonstrating concepts shows a deeper understanding of CS principles that can be beneficial in solving complex problems.
<b>Problem-solving Skills</b>: LeetCode and similar tests can help identify candidates with strong problem-solving skills.
<b>Experience Verification</b>: Specific technical questions about past projects can verify a candidate‚Äôs hands-on experience.
<br /><br />
I was in a scenario where I was interviewing candidates for a technology that I didn‚Äôt have a lot of information on. In fact, I had never really used that technology before, and I wondered if I was the ‚Äòright‚Äô person to do the interview. However, I was asked to do it, so I did. My approach was to look up very basic questions and answers about the technology we were looking for and conduct a conversational-style interview.
<br /><br />
<b>‚ÄúWhat kind of challenges did you face in your last project using this technology?‚Äù</b> as well as <b>‚ÄúWhat is the coolest thing you‚Äôve written in this technology and why?‚Äù</b>. I even managed to work the easy questions into these questions to really solidify basic knowledge of the technology. The answers to that style of question tell me more about the skill of that developer than a memorization test. I could immediately filter out who was winging it and who actually did the work. Plus, when you allow the candidate to talk and feel comfortable, you start seeing communication styles and any frustrations they might have had that allow you to ask follow-ups. I would argue that I was able to capture each of the arguments above this way.
<br /><br />
Is it a perfect approach? No. There will be people that slip through and talk a good game. However, those people that might slip through are usually good people as you felt good about their interview. Even with the occasional miss, I believe it is still better than the test-based approach. Let‚Äôs face it, unfortunately some people have been unemployed long enough where they can practice and memorize tests and definitions. That does not make them better programmers; they become better test-takers. <i>I‚Äôm not shaming the unemployed dev‚Ä¶ You are doing what you have to do to get a job. Keep at it, you‚Äôll get one soon enough!</i> My point is that these tests only eliminate candidates, and you are missing out on quality people because they may not have been exposed to exactly what you are working on.
<br /><br />
I know that there will be Software Managers and other Developers will say ‚Äúyour‚Äôre wrong! It does this, that and this‚Ä¶‚Äù Listen, interviewing is hard, the candidate is nervous, it is time-consuming for you and expensive for the company. Unless you have specific needs about O(n), or array manipulation and specifics for needing SUPER DEEP knowledge of a topic, I would suggest that you switch it up to a more conversational approach. You‚Äôll find a lot more candidates that you can train to get up to your standards as well as work with because you‚Äôve gotten an insight into who they are as a person.
<br /><br />
<b>For all the devs still looking for a job</b>: If you are in the C#, SQL, Angular space, here is my study guide that I was using: <a href="https://github.com/jeffvaccaro/jeffvaccaro/blob/main/study-guide.txt" target="_blank">https://github.com/jeffvaccaro/jeffvaccaro/blob/main/study-guide.txt</a>
<br /><br />
I‚Äôd love to hear about any tips and tricks you may have with studying up for the next interview! Keep grinding, you‚Äôre next gig is right around the corner!</p>
:ET